{"componentChunkName":"component---src-templates-docs-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"CS224n Natural Language Processing Tutorial | Abhishek Dutt","docsLocation":"https://abhishekdutt.github.io/cs224n-tensorflow/"}},"mdx":{"fields":{"id":"65248354-f155-5a7f-be77-b9af4da0c582","title":"Welcome","slug":"/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Welcome\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Aim of CS224n course:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An understanding of effective modern methods for deep learning\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basics first, then key methods used in NLP: Recurrent networds, attention, etc.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A big picture understanding of human languagegs and the difficulties in understadning and producting them\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An understanding of and ability to build systems (in PyTorch) for some of the major problems in NLP:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Word meaning, dependency parsing, machine translation, question answering\")))), mdx(\"h3\", null, \"Aims of this tutorial:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Be fast\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Dont waste time\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Cover only things that are important from a preffesional point of view and not really needed for academic stuff\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Dont go deep into academic theory, but go deep if needed\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use pictures.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"As less cognitive load as possible\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use pictures if needed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use words if needed\")))), mdx(\"p\", null, \"I am a visual learner and find it much easier to learn by seeing things,\\nthan by imagining mathematical symbols in my mind.\\nFollow a mind map approach. Ask and answer What, Why, How.\\nGo easy on the math, focus on the practical parts.\\nTheory without code is not very helpful.\"), mdx(\"p\", null, \"We will train our own Word2Vec from scratch\\nIts a compromise between technical correctness and ease of reading\\nNo need to explictly define every thing, assume most people can understand word meaning form the context or a quick google search if needed, remember emphasis is on being fast.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#aim-of-cs224n-course","title":"Aim of CS224n course:"},{"url":"#aims-of-this-tutorial","title":"Aims of this tutorial:"}]},"parent":{"__typename":"File","relativePath":"index.mdx"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/00_toc","title":"Table of Contents"}}},{"node":{"fields":{"slug":"/03_word_window","title":"03. Word Window Classification, Neural Networks, and Matrix Calculus"}}},{"node":{"fields":{"slug":"/05_linguistic_structure_dependency_parsing","title":"05. Linguistic Structure: Dependency Parsing"}}},{"node":{"fields":{"slug":"/01_word_vectors","title":"Word Vectors"}}},{"node":{"fields":{"slug":"/06_language_models_rnn","title":"06. The probability of a sentence? Recurrent Neural Networks and Language Models"}}},{"node":{"fields":{"slug":"/15_natural_language_generation","title":"15. Natural Language Generation"}}},{"node":{"fields":{"slug":"/07_vanishing_gradients_fancy_rnn","title":"07. Vanishing Gradients and Fancy RNNs"}}},{"node":{"fields":{"slug":"/codeblock","title":"Syntax Highlighting"}}},{"node":{"fields":{"slug":"/extra_stuff","title":"Extra Stuff"}}},{"node":{"fields":{"slug":"/","title":"Welcome"}}},{"node":{"fields":{"slug":"/codeblock/1-index","title":"Sub Page"}}},{"node":{"fields":{"slug":"/01_word_vectors/02_assignment1","title":"Assignment 1"}}},{"node":{"fields":{"slug":"/01_word_vectors/03_word2vec","title":"Word2Vec"}}},{"node":{"fields":{"slug":"/01_word_vectors/01_count_based","title":"Count Based Word Vectors"}}},{"node":{"fields":{"slug":"/01_word_vectors/singular_value_decomposition","title":"Singular Value Decomposition"}}}]}},"pageContext":{"id":"65248354-f155-5a7f-be77-b9af4da0c582"}}}